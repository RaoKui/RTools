package com.raokui.rtools.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.raokui.rtools.bean.PlanBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAN_BEAN".
*/
public class PlanBeanDao extends AbstractDao<PlanBean, Long> {

    public static final String TABLENAME = "PLAN_BEAN";

    /**
     * Properties of entity PlanBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Create_date = new Property(1, String.class, "create_date", false, "create_date");
        public final static Property End_year = new Property(2, int.class, "end_year", false, "end_year");
        public final static Property End_month = new Property(3, int.class, "end_month", false, "end_month");
        public final static Property End_day = new Property(4, int.class, "end_day", false, "end_day");
        public final static Property Is_repeat = new Property(5, int.class, "is_repeat", false, "is_repeat");
        public final static Property IsHas_child = new Property(6, int.class, "isHas_child", false, "isHas_child");
        public final static Property Is_completed = new Property(7, int.class, "is_completed", false, "is_completed");
        public final static Property Main_plan = new Property(8, String.class, "main_plan", false, "main_plan");
    }


    public PlanBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PlanBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAN_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"create_date\" TEXT," + // 1: create_date
                "\"end_year\" INTEGER NOT NULL ," + // 2: end_year
                "\"end_month\" INTEGER NOT NULL ," + // 3: end_month
                "\"end_day\" INTEGER NOT NULL ," + // 4: end_day
                "\"is_repeat\" INTEGER NOT NULL ," + // 5: is_repeat
                "\"isHas_child\" INTEGER NOT NULL ," + // 6: isHas_child
                "\"is_completed\" INTEGER NOT NULL ," + // 7: is_completed
                "\"main_plan\" TEXT);"); // 8: main_plan
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAN_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PlanBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String create_date = entity.getCreate_date();
        if (create_date != null) {
            stmt.bindString(2, create_date);
        }
        stmt.bindLong(3, entity.getEnd_year());
        stmt.bindLong(4, entity.getEnd_month());
        stmt.bindLong(5, entity.getEnd_day());
        stmt.bindLong(6, entity.getIs_repeat());
        stmt.bindLong(7, entity.getIsHas_child());
        stmt.bindLong(8, entity.getIs_completed());
 
        String main_plan = entity.getMain_plan();
        if (main_plan != null) {
            stmt.bindString(9, main_plan);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PlanBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String create_date = entity.getCreate_date();
        if (create_date != null) {
            stmt.bindString(2, create_date);
        }
        stmt.bindLong(3, entity.getEnd_year());
        stmt.bindLong(4, entity.getEnd_month());
        stmt.bindLong(5, entity.getEnd_day());
        stmt.bindLong(6, entity.getIs_repeat());
        stmt.bindLong(7, entity.getIsHas_child());
        stmt.bindLong(8, entity.getIs_completed());
 
        String main_plan = entity.getMain_plan();
        if (main_plan != null) {
            stmt.bindString(9, main_plan);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public PlanBean readEntity(Cursor cursor, int offset) {
        PlanBean entity = new PlanBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // create_date
            cursor.getInt(offset + 2), // end_year
            cursor.getInt(offset + 3), // end_month
            cursor.getInt(offset + 4), // end_day
            cursor.getInt(offset + 5), // is_repeat
            cursor.getInt(offset + 6), // isHas_child
            cursor.getInt(offset + 7), // is_completed
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // main_plan
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PlanBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setCreate_date(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEnd_year(cursor.getInt(offset + 2));
        entity.setEnd_month(cursor.getInt(offset + 3));
        entity.setEnd_day(cursor.getInt(offset + 4));
        entity.setIs_repeat(cursor.getInt(offset + 5));
        entity.setIsHas_child(cursor.getInt(offset + 6));
        entity.setIs_completed(cursor.getInt(offset + 7));
        entity.setMain_plan(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PlanBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PlanBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PlanBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
